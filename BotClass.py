import aiogram
from aiogram import Dispatcher, types
import uuid
from dataclasses import dataclass
from enum import Enum
from Tour import Tour
import copy
import json
from db import *

admins = [558838836, 842921731, 442132164]

class ExpectedMessage(Enum):
    unexpected = 0
    city_for_solo_tour = 1
    city_for_group_tour = 2
    age_for_reg = 3
    change_age = 4
    sex_for_reg = 5
    change_sex = 6
    dl_for_reg = 7
    change_dl = 8
    name_for_reg = 9
    change_name = 10
    contacts_for_reg = 11
    change_contacts = 12
    cur_form_purpose = 13
    cur_duration_of_trip = 14
    cur_form_company = 15
    cur_form_budget = 16
    cur_form_lifestyle = 17
    cur_form_count_visiting = 18
    cur_form_transport = 19
    cur_form_contacts = 20
    cur_form_comment = 21
    wait_user_mes = 22
    user_id = 23


class FormForOne:
    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ –Ω–∞–¥–æ —Ç–∞–∫–∂–µ –º–µ–Ω—è—Ç—å Users Encoder
    town = "Not filled"
    purpose_of_trip = "Not filled"
    duration_of_trip = "Not filled"
    company = "Not filled"
    budget = "Not filled"
    lifestyle = "Not filled"
    count_visiting = "Not filled"
    transport = "Not filled"
    contacts = "Not filled"
    comments = "Not filled"


@dataclass
class Chat:
    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ –Ω–∞–¥–æ —Ç–∞–∫–∂–µ –º–µ–Ω—è—Ç—å Users Encoder
    registration = False
    filling_the_form = False
    age = 18
    expect_mes = ExpectedMessage.unexpected
    all_blocked = False
    sex = True
    dl = False
    name = "User Name"
    contacts = "None"
    tour_count = 0
    tours = []
    cur_tour = FormForOne()  # —Ç–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è


class UsersEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Chat):
            return {"AGE": o.age, "EXPECT_MES": o.expect_mes, "ALL_BLOCKED": o.all_blocked, "SEX": o.sex, "DL": o.dl,
                    "NAME": o.name, "CONTACTS": o.contacts, "TOUR_COUNT": o.tour_count, "TOURS": o.tours,
                    "CUR_TOUR": o.cur_tour, "REGISTRATION": o.registration, "FILLING_THE_FORM": o.filling_the_form}
        elif isinstance(o, ExpectedMessage):
            return o.value
        elif isinstance(o, FormForOne):
            return {"town": o.town, "purpose_of_trip": o.purpose_of_trip, "duration_of_trip": o.duration_of_trip,
                    "company": o.company, "budget": o.budget, "lifestyle": o.lifestyle,
                    "count_visiting": o.count_visiting, "transport": o.transport, "contacts": o.contacts,
                    "comments": o.comments}
        return json.JSONEncoder.default(self, o)


def tour_maker(dic):
    res = FormForOne()
    res.town = dic["town"]
    res.purpose_of_trip = dic["purpose_of_trip"]
    res.duration_of_trip = dic["duration_of_trip"]
    res.company = dic["company"]
    res.budget = dic["budget"]
    res.lifestyle = dic["lifestyle"]
    res.count_visiting = dic["count_visiting"]
    res.transport = dic["transport"]
    res.contacts = dic["contacts"]
    res.comments = dic["comments"]
    return res


def chat_maker(dic):
    res = dict()
    for i in dic:
        res[int(i)] = Chat()
        res[int(i)].filling_the_form = bool(dic[i]["FILLING_THE_FORM"])
        res[int(i)].registration = bool(dic[i]["REGISTRATION"])
        res[int(i)].age = int(dic[i]["AGE"])
        res[int(i)].expect_mes = dic[i]["EXPECT_MES"]
        res[int(i)].all_blocked = bool(dic[i]["ALL_BLOCKED"])
        res[int(i)].sex = bool(dic[i]["SEX"])
        res[int(i)].dl = bool(dic[i]["DL"])
        res[int(i)].name = dic[i]["NAME"]
        res[int(i)].contacts = dic[i]["CONTACTS"]
        res[int(i)].tour_count = dic[i]["TOUR_COUNT"]
        res[int(i)].cur_tour = tour_maker(dic[i]["CUR_TOUR"])
        res[int(i)].tours = []
        for tour in dic[i]["TOURS"]:
            res[int(i)].tours.append(tour_maker(tour))
    return res


class Bot:
    def __init__(self, token, users_file_name):
        self.bot = aiogram.Bot(token)
        self.dp = Dispatcher(self.bot)
        with open(users_file_name, "r") as ufn:
            self.chats = json.load(ufn)
        self.user_file = users_file_name
        self.expected_message_type = ExpectedMessage.unexpected

    async def print_special_message(self, chat_id, mes_type, user):
        if mes_type == 'start':
            # profiles.add_user(chat_id)
            if chat_id in self.chats:
                if not self.chats[user["id"]].filling_the_form:
                    await self.print_special_message(chat_id, "menu", user)
                else:
                    self.chats[user["id"]].all_blocked = False
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    but_y = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit_from_form_start')
                    but_n = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å',
                                                       callback_data='continue_filling_the_form')
                    markup.add(but_y, but_n)
                    await self.bot.send_message(chat_id,
                                                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É ? –û—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ùå',
                                                reply_markup=markup)
            else:
                self.chats[chat_id] = Chat()
                markup = types.InlineKeyboardMarkup(row_width=1)
                but_y = types.InlineKeyboardButton(text='–î–∞', callback_data='start_work')
                but_i = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É', callback_data='help')
                markup.add(but_y, but_i)
                self.chats[user["id"]] = Chat()
                await self.bot.send_message(chat_id,
                                            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º üëã –ö–æ–º–∞–Ω–¥–∞ Tour4You –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ –í—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –∫ –Ω–∞–º! '
                                            '–ß—Ç–æ–±—ã –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É ‚¨á '
                                            '\n–ê –µ—Å–ª–∏ –í—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã, —Ç–æ –¥–∞–≤–∞–π—Ç–µ —Å–ø–ª–∞–Ω–∏—Ä—É–µ–º –í–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ? ü§©',
                                            reply_markup=markup)
        elif mes_type == 'start_after_info':
            markup = types.InlineKeyboardMarkup(row_width=1)
            but_y = types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='start_work')
            but_i = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É', callback_data='help')
            markup.add(but_y, but_i)
            await self.bot.send_message(chat_id, '–ü—Ä–µ–∂–¥–µ, —á–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å, –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—ã—Å—Ç—Ä—É—é –∞–Ω–∫–µ—Ç—É üôè',
                                        reply_markup=markup)
        elif mes_type == 'plug':
            await self.bot.send_message(chat_id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞')
            # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await self.print_special_message(chat_id, "menu", user)
        elif mes_type == 'menu':
            if chat_id in self.chats:
                if not self.chats[user["id"]].registration:
                    await self.print_special_message(chat_id, "start_after_info", user)
                elif self.chats[user["id"]].filling_the_form:
                    self.chats[user["id"]].all_blocked = False
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    but_y = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit_from_form_menu')
                    but_n = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å',
                                                       callback_data='continue_filling_the_form')
                    markup.add(but_y, but_n)
                    await self.bot.send_message(chat_id,
                                                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É ? –û—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ùå',
                                                reply_markup=markup)
                else:
                    self.chats[user["id"]].expect_mes = ExpectedMessage.unexpected
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    but_e = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ',
                                                       callback_data='edit_profile')
                    but_po = types.InlineKeyboardButton(text='–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–ª—è –º–µ–Ω—è',
                                                        callback_data='tour_one')
                    # but_pm = types.InlineKeyboardButton(text='–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='tour_many')
                    but_pt = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–æ—à–ª—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                                                        callback_data='prev_tours')
                    but_inf = types.InlineKeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='comp_info')
                    markup.add(but_e, but_po, but_pt, but_inf)
                    await self.bot.send_message(chat_id, 'üîÆ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üîÆ', reply_markup=markup)
            else:
                await self.print_special_message(chat_id, "start", user)
        elif mes_type == 'profile_info':
            if chat_id in self.chats:
                if not self.chats[user["id"]].registration:
                    await self.print_special_message(chat_id, "start_after_info", user)
                elif self.chats[user["id"]].filling_the_form:
                    self.chats[user["id"]].all_blocked = False
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    but_y = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit_from_form_profile_info')
                    but_n = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å',
                                                       callback_data='continue_filling_the_form')
                    markup.add(but_y, but_n)
                    await self.bot.send_message(chat_id,
                                                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É ? –û—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ùå',
                                                reply_markup=markup)
                else:
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    but_n = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='change_name')
                    but_a = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='change_age')
                    but_b = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª', callback_data='change_sex')
                    but_c = types.InlineKeyboardButton(text='–ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤', callback_data='change_dl')
                    but_d = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='change_contacts')
                    but_m = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu')
                    markup.add(but_n, but_a, but_b, but_c, but_d, but_m)
                    await self.bot.send_message(chat_id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è:'
                                                         '\n‚≠ê –ò–º—è: {0}'
                                                         '\n‚≠ê –í–æ–∑—Ä–∞—Å—Ç: {1}'
                                                         '\n‚≠ê –ü–æ–ª: {2}'
                                                         '\n‚≠ê –ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤: {3}'
                                                         '\n‚≠ê –ö–æ–Ω—Ç–∞–∫—Ç—ã: {4}'.format(str(self.chats[user["id"]].name),
                                                                                    str(self.chats[user["id"]].age),
                                                                                    "–ú—É–∂—Å–∫–æ–π" if self.chats[
                                                                                        user["id"]].sex
                                                                                    else "–ñ–µ–Ω—Å–∫–∏–π",
                                                                                    "–ï—Å—Ç—å" if self.chats[
                                                                                        user["id"]].dl else "–ù–µ—Ç",
                                                                                    str(self.chats[
                                                                                            user["id"]].contacts)),
                                                reply_markup=markup)
            else:
                await self.print_special_message(chat_id, "start", user)
        elif mes_type == 'plan_solo_tour':
            self.chats[user["id"]].cur_tour.town = "Not Filled"  # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[user["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[user["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[user["id"]].cur_tour.company = "Not Filled"
            self.chats[user["id"]].cur_tour.budget = "Not Filled"
            self.chats[user["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[user["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[user["id"]].cur_tour.transport = "Not Filled"
            self.chats[user["id"]].cur_tour.comments = "Not Filled"
            self.chats[user["id"]].cur_tour.contacts = "Not Filled"

            await self.bot.send_message(chat_id, 'üó∫ –î–∞–≤–∞–π—Ç–µ —Å–ø–ª–∞–Ω–∏—Ä—É–µ–º –í–∞–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üó∫',
                                        reply_markup=None)
            self.chats[user["id"]].filling_the_form = True
            await self.bot.send_message(chat_id, 'üìç –í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –í—ã –ø–æ–µ–¥–µ—Ç–µ?', reply_markup=None)
            self.chats[user["id"]].expect_mes = ExpectedMessage.city_for_solo_tour
            self.chats[user["id"]].all_blocked = True
        elif mes_type == "info":
            if chat_id in self.chats:
                if not self.chats[user["id"]].registration:
                    await self.print_special_message(chat_id, "start_after_info", user)
                elif self.chats[user["id"]].filling_the_form:
                    self.chats[user["id"]].all_blocked = False
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    but_y = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit_from_form_info')
                    but_n = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å',
                                                       callback_data='continue_filling_the_form')
                    markup.add(but_y, but_n)
                    await self.bot.send_message(chat_id,
                                                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É ? –û—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ùå',
                                                reply_markup=markup)
                else:
                    await self.bot.send_message(chat_id,
                                                'üíü –ú—ã —Å—Ç–∞—Ä—Ç–∞–ø Tour4You üíü –û—Ç–≤–µ—á–∞–µ–º –∑–∞ –í–∞—à –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –æ—Ç–¥—ã—Ö, '
                                                '—Å–æ—Å—Ç–∞–≤–ª—è—è –∑–∞ –í–∞—Å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞—è –º–∞—Ä—à—Ä—É—Ç üó∫'
                                                '\n\n‚úàÔ∏è –°–µ–π—á–∞—Å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ '
                                                '–æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏. –î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É, '
                                                '—É–∫–∞–∑–∞–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ @Tour4You_Bot. –ó–∞—Ç–µ–º –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, —É–∫–∞–∑–∞–≤ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, '
                                                '–Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ –í–∞—à—É –±–ª–∏–∂–∞–π—à—É—é –ø–æ–µ–∑–¥–∫—É. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∏–π –≤—Å–µ–º –í–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º. '
                                                '–ê —Ç–∞–∫ –∂–µ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–ª—É—á–∏—Ç—å –í–∞—à —Ñ–∏–¥–±–µ–∫.'
                                                '\n\nüí∞–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: 200 —Ä—É–±–ª–µ–π'
                                                '\nüí∞–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥'
                                                '\n\n‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ ‚òé'
                                                '\n‚û° –°–≤–µ—Ç–ª–∞–Ω–∞: @Svetlana_Gi'
                                                '\n‚û° –í–∏–∫—Ç–æ—Ä–∏—è: @at_one_day'
                                                '\n‚û° –î–∞–Ω–∏–∏–ª: @Daniilklo'
                                                '\n\nüì© –ù–∞—à–∞ –ø–æ—á—Ç–∞ üì© Tour4You@yandex.ru'
                                                '\n\n‚ùì–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ ‚ùì'
                                                '\nüìå –í–∫–ª–∞–¥–∫–∞ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ¬ª - –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –í—ã –º–æ–∂–µ—Ç–µ '
                                                '–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'
                                                '\nüìå –í–∫–ª–∞–¥–∫–∞ ¬´–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–ª—è –º–µ–Ω—è¬ª - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É '
                                                '–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
                                                '\nüìå –í–∫–ª–∞–¥–∫–∞ ¬´–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–æ—à–ª—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª - –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —É–∂–µ '
                                                '—Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–∞–º –í–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π')
                    await self.print_special_message(chat_id, "menu", user)
            else:
                await self.print_special_message(chat_id, "start", user)
        elif mes_type == "hi_admin":
            markup = types.InlineKeyboardMarkup(row_width=1)
            but_m = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu')
            but_e = types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='end')
            but_s = types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö', callback_data='save')
            but_uo = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='uncomp_orders')
            but_po = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='comp_orders')
            but_st = types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stat')
            but_sp = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω', callback_data='send_plan')
            but_sm = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data='send_mes')
            markup.add(but_m, but_e, but_s, but_uo, but_po, but_sp, but_st, but_sm)
            await self.bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω', reply_markup=markup)
        elif mes_type == "perm_denied":
            await self.bot.send_message(chat_id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
            await self.print_special_message(chat_id, "menu", user)
        else:
            await self.bot.send_message(chat_id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª :(')

    async def reply_inline_call(self, call):
        chat_id = call.message.chat.id
        if chat_id not in self.chats:
            self.chats[chat_id] = Chat()
        if self.chats[call["from"]["id"]].all_blocked:
            pass
        elif call.data == 'start_work':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.registration(chat_id, call["from"], 3)
        elif call.data == 'help':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call.message.chat.id,
                                        'üíü –ú—ã —Å—Ç–∞—Ä—Ç–∞–ø Tour4You üíü –û—Ç–≤–µ—á–∞–µ–º –∑–∞ –í–∞—à –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –æ—Ç–¥—ã—Ö, '
                                        '—Å–æ—Å—Ç–∞–≤–ª—è—è –∑–∞ –í–∞—Å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞—è –º–∞—Ä—à—Ä—É—Ç üó∫'
                                        '\n\n‚úàÔ∏è –°–µ–π—á–∞—Å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ '
                                        '–æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏. –î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É, '
                                        '—É–∫–∞–∑–∞–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ @Tour4You_Bot. –ó–∞—Ç–µ–º –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, —É–∫–∞–∑–∞–≤ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, '
                                        '–Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ –í–∞—à—É –±–ª–∏–∂–∞–π—à—É—é –ø–æ–µ–∑–¥–∫—É. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∏–π –≤—Å–µ–º –í–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º. '
                                        '–ê —Ç–∞–∫ –∂–µ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–ª—É—á–∏—Ç—å –í–∞—à —Ñ–∏–¥–±–µ–∫.'
                                        '\n\nüí∞–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: 200 —Ä—É–±–ª–µ–π'
                                        '\nüí∞–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥'
                                        '\n\n‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ ‚òé'
                                        '\n‚û° –°–≤–µ—Ç–ª–∞–Ω–∞: @Svetlana_Gi'
                                        '\n‚û° –í–∏–∫—Ç–æ—Ä–∏—è: @at_one_day'
                                        '\n‚û° –î–∞–Ω–∏–∏–ª: @Daniilklo'
                                        '\n\nüì© –ù–∞—à–∞ –ø–æ—á—Ç–∞ üì© Tour4You@yandex.ru'
                                        '\n\n‚ùì–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ ‚ùì'
                                        '\nüìå –í–∫–ª–∞–¥–∫–∞ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ¬ª - –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –í—ã –º–æ–∂–µ—Ç–µ '
                                        '–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'
                                        '\nüìå –í–∫–ª–∞–¥–∫–∞ ¬´–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–ª—è –º–µ–Ω—è¬ª - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É '
                                        '–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
                                        '\nüìå –í–∫–ª–∞–¥–∫–∞ ¬´–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–æ—à–ª—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª - –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —É–∂–µ '
                                        '—Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–∞–º –í–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π')
            await self.print_special_message(chat_id, "start_after_info", call["from"])
            # await self.print_special_message(chat_id, 'plug', call["from"])
        elif call.data == 'edit_profile':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.print_special_message(chat_id, 'profile_info', call["from"])
        elif call.data == 'tour_one':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.print_special_message(chat_id, 'plan_solo_tour', call["from"])
        elif call.data == 'tour_many':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.print_special_message(chat_id, 'plug', call["from"])
        elif call.data == 'back_to_menu':
            # await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            self.expected_message_type = ExpectedMessage.unexpected
            # self.chats[call["from"]["id"]].all_blocked = False
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.print_special_message(chat_id, 'menu', call["from"])
        elif call.data == 'change_age':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call["from"]["id"], 'üü£ –ö–∞–∫–æ–≤ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç?')
            self.chats[call["from"]["id"]].expect_mes = ExpectedMessage.change_age
            self.chats[call["from"]["id"]].all_blocked = True
        elif call.data == 'change_sex':
            markup = types.InlineKeyboardMarkup()
            but_m = types.InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–π', callback_data="change_sex_male")
            but_w = types.InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π', callback_data="change_sex_female")
            markup.add(but_m, but_w)
            await self.bot.send_message(call.message.chat.id, 'üü£ –ö–∞–∫–æ–≤ –í–∞—à –ø–æ–ª?', reply_markup=markup)
        elif call.data == 'change_dl':
            markup = types.InlineKeyboardMarkup()
            but_yes = types.InlineKeyboardButton(text='–î–∞', callback_data="change_dl_yes")
            but_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data="change_dl_no")
            markup.add(but_yes, but_no)
            await self.bot.send_message(call.message.chat.id, 'üü£ –£ –í–∞—Å –µ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞?', reply_markup=markup)
        elif call.data == 'registration_sex_male':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call.message.chat.id, '–ü–æ–ª: –ú—É–∂—Å–∫–æ–π', reply_markup=None)
            self.chats[call["from"]["id"]].sex = True
            await self.registration(chat_id, call["from"], 2)
        elif call.data == 'registration_sex_female':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call.message.chat.id, '–ü–æ–ª: –ñ–µ–Ω—Å–∫–∏–π', reply_markup=None)
            self.chats[call["from"]["id"]].sex = False
            await self.registration(chat_id, call["from"], 2)
        elif call.data == 'change_sex_male':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call.message.chat.id, '–ü–æ–ª: –ú—É–∂—Å–∫–æ–π', reply_markup=None)
            self.chats[call["from"]["id"]].sex = True
            await self.print_special_message(call["from"]["id"], "profile_info", call["from"])
        elif call.data == 'change_sex_female':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call.message.chat.id, '–ü–æ–ª: –ñ–µ–Ω—Å–∫–∏–π', reply_markup=None)
            self.chats[call["from"]["id"]].sex = False
            await self.print_special_message(call["from"]["id"], "profile_info", call["from"])
        elif call.data == 'registration_dl_yes':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call.message.chat.id, '–ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤: –ï—Å—Ç—å', reply_markup=None)
            self.chats[call["from"]["id"]].dl = True
            await self.registration(chat_id, call["from"], 4)
        elif call.data == 'registration_dl_no':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call.message.chat.id, '–ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤: –ù–µ—Ç', reply_markup=None)
            self.chats[call["from"]["id"]].dl = False
            await self.registration(chat_id, call["from"], 4)
        elif call.data == 'change_dl_yes':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call.message.chat.id, '–ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤: –ï—Å—Ç—å', reply_markup=None)
            self.chats[call["from"]["id"]].dl = True
            await self.print_special_message(call["from"]["id"], "profile_info", call["from"])
        elif call.data == 'change_dl_no':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call.message.chat.id, '–ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤: –ù–µ—Ç', reply_markup=None)
            self.chats[call["from"]["id"]].dl = False
            await self.print_special_message(call["from"]["id"], "profile_info", call["from"])
        elif call.data == 'change_name':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call["from"]["id"], 'üü£ –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
            self.chats[call["from"]["id"]].expect_mes = ExpectedMessage.change_name
            self.chats[call["from"]["id"]].all_blocked = True
        elif call.data == 'change_contacts':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call["from"]["id"], 'üü£ –ö–∞–∫ –µ—â–µ –º–æ–∂–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (—Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç–∞/...) ?')
            self.chats[call["from"]["id"]].expect_mes = ExpectedMessage.change_contacts
            self.chats[call["from"]["id"]].all_blocked = True
        elif call.data == 'prev_tours':
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            if len(self.chats[call["from"]["id"]].tours) == 0:
                await self.bot.send_message(call["from"]["id"], '–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ü•∫')
                await self.print_special_message(call["from"]["id"], "menu", call["from"])
            else:
                for i in range(len(self.chats[call["from"]["id"]].tours)):
                    await self.bot.send_message(call["from"]["id"], '‚úàÔ∏è –ü–æ–µ–∑–¥–∫–∞ ‚Ññ {0}'
                                                                    '\nüìç –ö—É–¥–∞: {1}'
                                                                    '\nüìç –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {2}'
                                                                    '\nüìç –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: \n\n'.format(
                        str(i + 1),
                        self.chats[call["from"]["id"]].tours[i].town,
                        self.chats[call["from"]["id"]].tours[i].duration_of_trip))
                await self.print_special_message(call["from"]["id"], "menu", call["from"])
        elif call.data == "comp_info":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.print_special_message(chat_id, 'info', call["from"])
        elif call.data == "cur_form_comment_yes":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.send_message(call["from"]["id"], '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')
            self.chats[call["from"]["id"]].expect_mes = ExpectedMessage.cur_form_comment
            self.chats[call["from"]["id"]].all_blocked = True
        elif call.data == "cur_form_comment_no":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            markup = types.InlineKeyboardMarkup(row_width=1)
            but_s = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data="send_cur_form")
            but_a = types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ', callback_data="fill_form_again")
            markup.add(but_s, but_a)
            await self.bot.send_message(call["from"]["id"], '‚¨á –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã ‚¨á'
                                                            '\n\nüîò –ì–æ—Ä–æ–¥, –∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å: {0}'
                                                            '\n\nüîò –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏: {1}'
                                                            '\n\nüîò–ü–µ—Ä–∏–æ–¥ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –∏ –¥–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {2}'
                                                            '\n\nüîò–í –∫–∞–∫–æ–º —Å–æ—Å—Ç–∞–≤–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å: {3}'
                                                            '\n\nüîò–ë—é–¥–∂–µ—Ç –ø–æ–µ–∑–¥–∫–∏ (—Å–µ–≥–º–µ–Ω—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–π): {4}'
                                                            '\n\nüîò–í–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {5}'
                                                            '\n\nüîò–ö–æ—Ç–æ—Ä—ã–π —Ä–∞–∑ –ø–æ—Å–µ—â–∞–µ—Ç–µ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥: {6}'
                                                            '\n\nüîò–ù–∞ –∫–∞–∫–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –¥–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ –≥–æ—Ä–æ–¥–∞: {7}'
                                                            '\n\nüîò–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {8}'
                                                            '\n\nüîò–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {9}'.format(
                self.chats[call["from"]["id"]].cur_tour.town,
                self.chats[call["from"]["id"]].cur_tour.purpose_of_trip,
                self.chats[call["from"]["id"]].cur_tour.duration_of_trip,
                self.chats[call["from"]["id"]].cur_tour.company,
                self.chats[call["from"]["id"]].cur_tour.budget,
                self.chats[call["from"]["id"]].cur_tour.lifestyle,
                self.chats[call["from"]["id"]].cur_tour.count_visiting,
                self.chats[call["from"]["id"]].cur_tour.transport,
                self.chats[call["from"]["id"]].cur_tour.comments,
                self.chats[call["from"]["id"]].cur_tour.contacts), reply_markup=markup)
        elif call.data == "send_cur_form":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

            # –¥–æ–±–∞–≤–∏–ª–∏ –≤ db 
            copy_cur_tour = copy.copy(self.chats[call["from"]["id"]].cur_tour)
            list_parametrs = [str(uuid.uuid4()), call.message.chat.id, copy_cur_tour.town, copy_cur_tour.purpose_of_trip,
                              copy_cur_tour.duration_of_trip,
                              copy_cur_tour.company, copy_cur_tour.budget, copy_cur_tour.lifestyle,
                              copy_cur_tour.count_visiting,
                              copy_cur_tour.transport, copy_cur_tour.contacts, copy_cur_tour.comments]
            cur_user_form = [tuple(list_parametrs)]
            with con:
                con.executemany(sql, cur_user_form)

            # self.chats[call["from"]["id"]].tours.append(copy.copy(self.chats[call["from"]["id"]].cur_tour))
            # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[call["from"]["id"]].cur_tour.town = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.company = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.budget = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.transport = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.comments = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.contacts = "Not Filled"
            await self.bot.send_message(call["from"]["id"], '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ –°–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!'
                                                            '\n‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ ‚òé'
                                                            '\n‚û° –°–≤–µ—Ç–ª–∞–Ω–∞: @Svetlana_Gi'
                                                            '\n‚û° –í–∏–∫—Ç–æ—Ä–∏—è: @at_one_day'
                                                            '\n‚û° –î–∞–Ω–∏–∏–ª: @Daniilklo'
                                                            '\nüì© –ù–∞—à–∞ –ø–æ—á—Ç–∞ üì© Tour4You@yandex.ru')
            self.chats[call["from"]["id"]].filling_the_form = False

            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
            for admin in admins:
                await self.bot.send_message(admin, "üÜò User {0} –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö "
                                                   "–∑–∞–∫–∞–∑–∞—Ö üÜò".format(call["from"]["id"]))

            await self.print_special_message(chat_id, 'menu', call["from"])
        elif call.data == "fill_form_again":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            self.chats[call["from"]["id"]].cur_tour.town = "Not Filled"  # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[call["from"]["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.company = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.budget = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.transport = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.comments = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.contacts = "Not Filled"
            await self.print_special_message(chat_id, 'plan_solo_tour', call["from"])
        elif call.data == "save":
            with open(self.user_file, "w") as fd:
                json.dump(self.chats, fd, cls=UsersEncoder)
            await self.print_special_message(chat_id, 'hi_admin', call["from"])
        elif call.data == "end":
            with open(self.user_file, "w") as fd:
                json.dump(self.chats, fd, cls=UsersEncoder)
            x = 42 / 0
        elif call.data == "uncomp_orders":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call.message.chat.id, "–ê–¥–º–∏–Ω, –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º–∏ "
                                                              "–∑–∞–∫–∞–∑–∞–º–∏: https://sqliteviewer.app")
            await self.bot.send_document(chat_id=call.message.chat.id, document=open('not_finished_forms.db', 'rb'))
            # await self.print_special_message(chat_id, "plug", call["from"])
        elif call.data == "comp_orders":
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call.message.chat.id,
                                        "–ê–¥–º–∏–Ω, –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ "
                                        "–∑–∞–∫–∞–∑–∞–º–∏: https://sqliteviewer.app")
            await self.bot.send_document(chat_id=call.message.chat.id, document=open('finished_forms.db', 'rb'))
            # await self.print_special_message(chat_id, "plug", call["from"])
        elif call.data == "stat":
            await self.print_special_message(chat_id, "plug", call["from"])
        elif call.data == "send_plan":
            await self.bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, user_id, town, —Å—Å—ã–ª–∫—É, –∫–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª!!', reply_markup=None)
            self.chats[call["from"]["id"]].expect_mes = ExpectedMessage.user_id
            self.chats[call["from"]["id"]].all_blocked = True
            # await self.print_special_message(chat_id, "plug", call["from"])
        elif call.data == "send_mes":
            await self.send_adm_mes(chat_id, call["from"], 0)
        elif call.data == "exit_from_form_start":
            self.chats[call["from"]["id"]].all_blocked = False
            self.chats[call["from"]["id"]].filling_the_form = False
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            self.chats[call["from"]["id"]].cur_tour.town = "Not Filled"  # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[call["from"]["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.company = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.budget = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.transport = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.comments = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.contacts = "Not Filled"

            await self.bot.send_message(call["from"]["id"], '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã üîö', reply_markup=None)
            await self.print_special_message(chat_id, 'start', call["from"])
        elif call.data == "exit_from_form_menu":
            self.chats[call["from"]["id"]].all_blocked = False
            self.chats[call["from"]["id"]].filling_the_form = False
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            self.chats[call["from"]["id"]].cur_tour.town = "Not Filled"  # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[call["from"]["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.company = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.budget = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.transport = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.comments = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.contacts = "Not Filled"

            await self.bot.send_message(call["from"]["id"], '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã üîö', reply_markup=None)
            await self.print_special_message(chat_id, 'menu', call["from"])
        elif call.data == "exit_from_form_profile_info":
            self.chats[call["from"]["id"]].all_blocked = False
            self.chats[call["from"]["id"]].filling_the_form = False
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            self.chats[call["from"]["id"]].cur_tour.town = "Not Filled"  # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[call["from"]["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.company = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.budget = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.transport = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.comments = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.contacts = "Not Filled"

            await self.bot.send_message(call["from"]["id"], '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã üîö', reply_markup=None)
            await self.print_special_message(chat_id, 'profile_info', call["from"])
        elif call.data == "exit_from_form_info":
            self.chats[call["from"]["id"]].all_blocked = False
            self.chats[call["from"]["id"]].filling_the_form = False
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            self.chats[call["from"]["id"]].cur_tour.town = "Not Filled"  # –æ–±–Ω—É–ª–∏–ª–∞ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            self.chats[call["from"]["id"]].cur_tour.purpose_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.duration_of_trip = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.company = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.budget = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.lifestyle = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.count_visiting = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.transport = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.comments = "Not Filled"
            self.chats[call["from"]["id"]].cur_tour.contacts = "Not Filled"

            await self.bot.send_message(call["from"]["id"], '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã üîö', reply_markup=None)
            await self.print_special_message(chat_id, 'info', call["from"])
        elif call.data == "continue_filling_the_form":
            self.chats[call["from"]["id"]].all_blocked = True
            await self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
            await self.bot.send_message(call["from"]["id"], '–ñ–¥—É –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ‚åõ', reply_markup=None)

    async def registration(self, chat_id, user, stage=0):
        if stage == 0:
            await self.bot.send_message(user["id"], 'üü£ –ö–∞–∫–æ–≤ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.age_for_reg
            self.chats[user["id"]].all_blocked = True
        elif stage == 1:
            markup = types.InlineKeyboardMarkup()
            but_m = types.InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–π', callback_data="registration_sex_male")
            but_w = types.InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π', callback_data="registration_sex_female")
            markup.add(but_m, but_w)
            await self.bot.send_message(user["id"], 'üü£ –ö–∞–∫–æ–≤ –í–∞—à –ø–æ–ª?', reply_markup=markup)
        elif stage == 2:
            markup = types.InlineKeyboardMarkup()
            but_yes = types.InlineKeyboardButton(text='–î–∞', callback_data="registration_dl_yes")
            but_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data="registration_dl_no")
            markup.add(but_yes, but_no)
            await self.bot.send_message(user["id"], 'üü£ –£ –í–∞—Å –µ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞?', reply_markup=markup)
        elif stage == 3:
            await self.bot.send_message(user["id"], 'üü£ –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.name_for_reg
            self.chats[user["id"]].all_blocked = True
        elif stage == 4:
            await self.bot.send_message(user["id"], 'üü£ –ö–∞–∫ –µ—â–µ –º–æ–∂–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (—Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç–∞/...) ?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.contacts_for_reg
            self.chats[user["id"]].all_blocked = True
        else:
            self.chats[user["id"]].registration = True
            await self.print_special_message(user["id"], "menu", user)

    async def form_tour_for_one(self, chat_id, user, stage=0):
        if stage == 0:
            await self.bot.send_message(chat_id, 'üìç –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏ ?'
                                                 '\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:'
                                                 '\n‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –≥–æ—Ä–æ–¥–∞'
                                                 '\n‚≠ê –ü—Ä–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤–µ—á–µ—Ä–Ω—é—é –∏ –Ω–æ—á–Ω—É—é –∂–∏–∑–Ω—å –≥–æ—Ä–æ–¥–∞'
                                                 '\n‚≠ê –¢—É—Ä –ø–æ —Å–∞–º—ã–º –º–æ–ª–æ–¥–µ–∂–Ω—ã–º –º–µ—Å—Ç–∞–º –≥–æ—Ä–æ–¥–∞'
                                                 '\n‚≠ê –ì–∞—Å—Ç—Ä–æ—Ç—É—Ä'
                                                 '\n‚≠ê –ê–∫—Ç–∏–≤–Ω—ã–π/—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö'
                                                 '\n‚≠ê –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–µ–∑–¥–∫–∞'
                                                 '\n‚≠ê –°–µ–º–µ–π–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_purpose
            self.chats[user["id"]].all_blocked = True
        elif stage == 1:
            await self.bot.send_message(chat_id, 'üìç –ü–µ—Ä–∏–æ–¥ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –∏ –¥–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_duration_of_trip
            self.chats[user["id"]].all_blocked = True
        elif stage == 2:
            await self.bot.send_message(chat_id, 'üìç –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–∞–≤–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_company
            self.chats[user["id"]].all_blocked = True
        elif stage == 3:
            await self.bot.send_message(chat_id, 'üìç –ë—é–¥–∂–µ—Ç –ø–æ–µ–∑–¥–∫–∏ (—Å–µ–≥–º–µ–Ω—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–π)')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_budget
            self.chats[user["id"]].all_blocked = True
        elif stage == 4:
            await self.bot.send_message(chat_id, 'üìç –û–ø–∏—à–∏—Ç–µ –í–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'
                                                 '\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:'
                                                 '\n‚≠ê –î–µ–≤–æ—á–∫–∞ —Å –ø–∞—Ç—Ä–∏–∫–æ–≤'
                                                 '\n‚≠ê –ù–∞ —Ä—ç–ø–µ –Ω–∞ —Ç—Ä–µ–ø–µ'
                                                 '\n‚≠ê –¢—É—Å–æ–≤—â–∏–∫'
                                                 '\n‚≠ê –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å'
                                                 '\n‚≠ê –ù–∞ —Å–≤—ç–≥–µ'
                                                 '\n‚≠ê –õ–µ–Ω–∏–≤–µ—Ü')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_lifestyle
            self.chats[user["id"]].all_blocked = True
        elif stage == 5:
            await self.bot.send_message(chat_id, 'üìç –ö–æ—Ç–æ—Ä—ã–π —Ä–∞–∑ –ø–æ—Å–µ—â–∞–µ—Ç–µ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ ?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_count_visiting
            self.chats[user["id"]].all_blocked = True
        elif stage == 6:
            await self.bot.send_message(chat_id, 'üìç –ù–∞ –∫–∞–∫–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ–±–∏—Ä–∞—Ç—å—Å—è –¥–æ –≥–æ—Ä–æ–¥–∞ ?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_transport
            self.chats[user["id"]].all_blocked = True
        elif stage == 7:
            await self.bot.send_message(chat_id, 'üìç –ö–∞–∫ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (email/telegram/phone ...) ?')
            self.chats[user["id"]].expect_mes = ExpectedMessage.cur_form_contacts
            self.chats[user["id"]].all_blocked = True
        elif stage == 8:
            markup = types.InlineKeyboardMarkup()
            but_y = types.InlineKeyboardButton(text='–î–∞', callback_data="cur_form_comment_yes")
            but_n = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data="cur_form_comment_no")
            markup.add(but_y, but_n)
            await self.bot.send_message(chat_id, 'üìç –•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å ?', reply_markup=markup)

    async def create_tour(self, city, chat_id, tour_type='solo'):
        if tour_type == 'solo':
            tour = Tour(city, [self.chats[chat_id]])
        else:
            tour = "Nothing"
            pass
        markup = types.InlineKeyboardMarkup(row_width=1)
        but_m = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu')
        markup.add(but_m)
        await self.bot.send_message(chat_id, str(tour), reply_markup=markup)

    async def send_adm_mes(self, chat_id, admin, stage, message=""):
        if stage == 0:
            self.chats[admin["id"]].expect_mes = ExpectedMessage.wait_user_mes
            self.chats[admin["id"]].all_blocked = True
            await self.bot.send_message(chat_id,
                                        "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª * —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–º–µ–Ω–∞")
        else:
            user_id, mes = message.split("*")
            await self.bot.send_message(int(user_id), mes)
            await self.print_special_message(admin["id"], "hi_admin", admin)

    async def print_info(self, chat_id):
        await self.bot.send_message(chat_id, f'–í–æ–∑—Ä–∞—Å—Ç: {self.chats[chat_id].age}')

    async def start(self):
        await self.dp.start_polling(self.bot)
